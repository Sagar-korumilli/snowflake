name: Deploy to Snowflake

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to get commit history for diffing

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install SnowCLI
        run: |
          pip install --user snowflake-cli
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure SnowCLI
        run: |
          mkdir -p ~/.snowflake
          cat << EOF > ~/.snowflake/config.toml
          [connections.default]
          account = "iiljdbv-rv91789"
          user = "SAGARK"
          password = "Infyme@25011998"
          role = "ACCOUNTADMIN"
          database = "DEVOPS"
          warehouse = "COMPUTE_WH"
          EOF
          chmod 600 ~/.snowflake/config.toml

      - name: Test Snowflake connection
        run: snow connection test --connection default

      - name: Detect Changed SQL Files
        id: changes
        run: |
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | grep '\.sql$' || true)
  
  # If no changes found, fallback to all SQLs (first deployment)
  if [[ -z "$CHANGED_FILES" ]]; then
    echo "No changed .sql files found. Assuming first deployment: deploying everything."
    echo "DEPLOY_ALL=true" >> $GITHUB_ENV
  else
    echo "$CHANGED_FILES" > changed_files.txt
    echo "DEPLOY_ALL=false" >> $GITHUB_ENV
  fi
  shell: /usr/bin/bash -e {0}
  env:
    pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
    PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
    Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
    Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
    Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
    LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
  
From https://github.com/Sagar-korumilli/snowflake
 * branch            master     -> FETCH_HEAD
No changed .sql files found. Assuming first deployment: deploying everything.

          # If no changes found, fallback to all SQLs (first deployment)
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No changed .sql files found. Assuming first deployment: deploying everything."
            echo "DEPLOY_ALL=true" >> $GITHUB_ENV
          else
            echo "$CHANGED_FILES" > changed_files.txt
            echo "DEPLOY_ALL=false" >> $GITHUB_ENV
          fi

      - name: Deploy schemas creation script
        if: env.DEPLOY_ALL == 'true' || contains(fromJSON(steps.changes.outputs.CHANGED_FILES || ''), 'scripts/create_schemas.sql')
        run: |
          if [ -f "scripts/create_schemas.sql" ]; then
            echo "Creating schemas..."
            snow sql -f scripts/create_schemas.sql --connection default
          fi

      - name: Deploy tables
        run: |
          if [[ "$DEPLOY_ALL" == "true" ]]; then
            echo "Deploying ALL tables..."
            find schemas -type f -path "*/tables/*.sql" | sort | while read file; do
              echo "Deploying $file"
              snow sql -f "$file" --connection default
            done
          else
            echo "Deploying CHANGED tables..."
            grep '/tables/' changed_files.txt | while read file; do
              echo "Deploying $file"
              snow sql -f "$file" --connection default
            done
          fi

      - name: Deploy views
        run: |
          if [[ "$DEPLOY_ALL" == "true" ]]; then
            echo "Deploying ALL views..."
            find schemas -type f -path "*/views/*.sql" | sort | while read file; do
              echo "Deploying $file"
              snow sql -f "$file" --connection default
            done
          else
            echo "Deploying CHANGED views..."
            grep '/views/' changed_files.txt | while read file; do
              echo "Deploying $file"
              snow sql -f "$file" --connection default
            done
          fi

      - name: Deploy other SQL objects
        run: |
          if [[ "$DEPLOY_ALL" == "true" ]]; then
            echo "Deploying ALL other objects..."
            find schemas -type f -name "*.sql" -not -path "*/tables/*" -not -path "*/views/*" | sort | while read file; do
              echo "Deploying $file"
              snow sql -f "$file" --connection default
            done
          else
            echo "Deploying CHANGED other objects..."
            grep -v '/tables/' changed_files.txt | grep -v '/views/' | while read file; do
              echo "Deploying $file"
              snow sql -f "$file" --connection default
            done
          fi
